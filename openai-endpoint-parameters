{'making-requests': {'sections': []}, 'models': {'sections': ['list', 'retrieve'], 'list': {'sync': 'openai.Model.list', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Model.list()', 'models': [], 'params': ''}, 'retrieve': {'sync': 'openai.Model.retrieve', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Model.retrieve("text-davinci-003")', 'models': ['babbage', 'ada', 'text-davinci-003', 'davinci', 'text-davinci-002', 'text-davinci-001', 'curie-instruct-beta', 'code-cushman-001', 'text-ada-001', 'code-davinci-002', 'text-curie-001', 'davinci-instruct-beta', 'text-babbage-001', 'curie'], 'params': {'all': ['model'], 'model': {'name': 'model', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The ID of the model to use for this request', 'choices': {'type': 'none', 'options': []}}}}}, 'completions': {'sections': ['create'], 'create': {'sync': 'openai.Completion.create', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Completion.create(\n  model="text-davinci-003",\n  prompt="Say this is a test",\n  max_tokens=7,\n  temperature=0\n)', 'models': ['babbage', 'ada', 'text-davinci-003', 'davinci', 'text-davinci-002', 'text-davinci-001', 'curie-instruct-beta', 'code-cushman-001', 'text-ada-001', 'code-davinci-002', 'text-curie-001', 'davinci-instruct-beta', 'text-babbage-001', 'curie'], 'params': {'all': ['model', 'prompt', 'suffix', 'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'echo', 'stop', 'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], 'model': {'name': 'model', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'ID of the model to use. You can use the List models API to see all of your available models, or see our Model overview for descriptions of them.', 'choices': {'type': 'none', 'options': []}}, 'prompt': {'name': 'prompt', 'type': 'string or array', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to &lt;|endoftext|&gt;', 'description': 'The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.Note that &lt;|endoftext|&gt; is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.', 'choices': {'type': 'none', 'options': []}}, 'suffix': {'name': 'suffix', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to null', 'description': 'The suffix that comes after a completion of inserted text.', 'choices': {'type': 'none', 'options': []}}, 'max_tokens': {'name': 'max_tokens', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 16', 'description': 'The maximum number of tokens to generate in the completion.The token count of your prompt plus max_tokens cannot exceed the models context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096).', 'choices': {'type': 'none', 'options': []}}, 'temperature': {'name': 'temperature', 'type': 'number', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1', 'description': 'What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.We generally recommend altering this or top_p but not both.', 'choices': {'type': 'none', 'options': []}}, 'top_p': {'name': 'top_p', 'type': 'number', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1', 'description': 'An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.We generally recommend altering this or temperature but not both.', 'choices': {'type': 'none', 'options': []}}, 'n': {'name': 'n', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1', 'description': 'How many completions to generate for each prompt.Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.', 'choices': {'type': 'none', 'options': []}}, 'stream': {'name': 'stream', 'type': 'boolean', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to false', 'description': 'Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.', 'choices': {'type': 'none', 'options': []}}, 'logprobs': {'name': 'logprobs', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to null', 'description': 'Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.The maximum value for logprobs is 5. If you need more than this, please contact us through our Help center and describe your use case.', 'choices': {'type': 'none', 'options': []}}, 'echo': {'name': 'echo', 'type': 'boolean', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to false', 'description': 'Echo back the prompt in addition to the completion', 'choices': {'type': 'none', 'options': []}}, 'stop': {'name': 'stop', 'type': 'string or array', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to null', 'description': 'Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.', 'choices': {'type': 'none', 'options': []}}, 'presence_penalty': {'name': 'presence_penalty', 'type': 'number', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 0', 'description': 'Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the models likelihood to talk about new topics.See more information about frequency and presence penalties.', 'choices': {'type': 'range', 'options': ['-2.0', '2.0']}}, 'frequency_penalty': {'name': 'frequency_penalty', 'type': 'number', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 0', 'description': 'Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the models likelihood to repeat the same line verbatim.See more information about frequency and presence penalties.', 'choices': {'type': 'range', 'options': ['-2.0', '2.0']}}, 'best_of': {'name': 'best_of', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1', 'description': 'Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.When used with n, best_of controls the number of candidate completions and n specifies how many to return â€“ best_of must be greater than n.Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.', 'choices': {'type': 'none', 'options': []}}, 'logit_bias': {'name': 'logit_bias', 'type': 'map', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to null', 'description': 'Modify the likelihood of specified tokens appearing in the completion.Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.As an example, you can pass {"50256": -100} to prevent the &lt;|endoftext|&gt; token from being generated.', 'choices': {'type': 'none', 'options': []}}, 'user': {'name': 'user', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': '', 'description': 'A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.', 'choices': {'type': 'none', 'options': []}}}}}, 'edits': {'sections': ['create'], 'create': {'sync': 'openai.Edit.create', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Edit.create(\n  model="text-davinci-edit-001",\n  input="What day of the wek is it?",\n  instruction="Fix the spelling mistakes"\n)', 'models': ['text-davinci-edit-001', 'code-davinci-edit-001'], 'params': {'all': ['model', 'input', 'instruction', 'n', 'temperature', 'top_p'], 'model': {'name': 'model', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'ID of the model to use. You can use the List models API to see all of your available models, or see our Model overview for descriptions of them.', 'choices': {'type': 'none', 'options': []}}, 'input': {'name': 'input', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to ', 'description': 'The input text to use as a starting point for the edit.', 'choices': {'type': 'none', 'options': []}}, 'instruction': {'name': 'instruction', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The instruction that tells the model how to edit the prompt.', 'choices': {'type': 'none', 'options': []}}, 'n': {'name': 'n', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1', 'description': 'How many edits to generate for the input and instruction.', 'choices': {'type': 'none', 'options': []}}, 'temperature': {'name': 'temperature', 'type': 'number', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1', 'description': 'What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.We generally recommend altering this or top_p but not both.', 'choices': {'type': 'none', 'options': []}}, 'top_p': {'name': 'top_p', 'type': 'number', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1', 'description': 'An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.We generally recommend altering this or temperature but not both.', 'choices': {'type': 'none', 'options': []}}}}}, 'images': {'sections': ['create', 'create-edit', 'create-variation'], 'create': {'sync': 'openai.Image.create', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Image.create(\n  prompt="A cute baby sea otter",\n  n=2,\n  size="1024x1024"\n)', 'models': [], 'params': {'all': ['prompt', 'n', 'size', 'response_format', 'user'], 'prompt': {'name': 'prompt', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'A text description of the desired image(s). The maximum length is 1000 characters.', 'choices': {'type': 'none', 'options': []}}, 'n': {'name': 'n', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1', 'description': 'The number of images to generate. Must be between 1 and 10.', 'choices': {'type': 'range', 'options': ['1', '10']}}, 'size': {'name': 'size', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1024x1024', 'description': 'The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.', 'choices': {'type': 'choice', 'options': ['256x256', '512x512', '1024x1024']}}, 'response_format': {'name': 'response_format', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to url', 'description': 'The format in which the generated images are returned. Must be one of url or b64_json.', 'choices': {'type': 'choice', 'options': ['url', 'b64_json']}}, 'user': {'name': 'user', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': '', 'description': 'A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.', 'choices': {'type': 'none', 'options': []}}}}, 'create-edit': {'sync': 'openai.Image.create_edit', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Image.create_edit(\n  image=open("otter.png", "rb"),\n  mask=open("mask.png", "rb"),\n  prompt="A cute baby sea otter wearing a beret",\n  n=2,\n  size="1024x1024"\n)', 'models': [], 'params': {'all': ['image', 'mask', 'prompt', 'n', 'size', 'response_format', 'user'], 'image': {'name': 'image', 'type': 'string', 'baseType': 'file', 'opt': 'Required', 'default': '', 'description': 'The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.', 'choices': {'type': 'none', 'options': []}}, 'mask': {'name': 'mask', 'type': 'string', 'baseType': 'file', 'opt': 'Optional', 'default': '', 'description': 'An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where image should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as image.', 'choices': {'type': 'none', 'options': []}}, 'prompt': {'name': 'prompt', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'A text description of the desired image(s). The maximum length is 1000 characters.', 'choices': {'type': 'none', 'options': []}}, 'n': {'name': 'n', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1', 'description': 'The number of images to generate. Must be between 1 and 10.', 'choices': {'type': 'range', 'options': ['1', '10']}}, 'size': {'name': 'size', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1024x1024', 'description': 'The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.', 'choices': {'type': 'choice', 'options': ['256x256', '512x512', '1024x1024']}}, 'response_format': {'name': 'response_format', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to url', 'description': 'The format in which the generated images are returned. Must be one of url or b64_json.', 'choices': {'type': 'choice', 'options': ['url', 'b64_json']}}, 'user': {'name': 'user', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': '', 'description': 'A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.', 'choices': {'type': 'none', 'options': []}}}}, 'create-variation': {'sync': 'openai.Image.create_variation', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Image.create_variation(\n  image=open("otter.png", "rb"),\n  n=2,\n  size="1024x1024"\n)', 'models': [], 'params': {'all': ['image', 'n', 'size', 'response_format', 'user'], 'image': {'name': 'image', 'type': 'string', 'baseType': 'file', 'opt': 'Required', 'default': '', 'description': 'The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.', 'choices': {'type': 'none', 'options': []}}, 'n': {'name': 'n', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1', 'description': 'The number of images to generate. Must be between 1 and 10.', 'choices': {'type': 'range', 'options': ['1', '10']}}, 'size': {'name': 'size', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 1024x1024', 'description': 'The size of the generated images. Must be one of 256x256, 512x512, or 1024x1024.', 'choices': {'type': 'choice', 'options': ['256x256', '512x512', '1024x1024']}}, 'response_format': {'name': 'response_format', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to url', 'description': 'The format in which the generated images are returned. Must be one of url or b64_json.', 'choices': {'type': 'choice', 'options': ['url', 'b64_json']}}, 'user': {'name': 'user', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': '', 'description': 'A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.', 'choices': {'type': 'none', 'options': []}}}}}, 'embeddings': {'sections': ['create'], 'create': {'sync': 'openai.Embedding.create', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Embedding.create(\n  model="text-embedding-ada-002",\n  input="The food was delicious and the waiter..."\n)', 'models': [], 'params': {'all': ['model', 'input', 'user'], 'model': {'name': 'model', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'ID of the model to use. You can use the List models API to see all of your available models, or see our Model overview for descriptions of them.', 'choices': {'type': 'none', 'options': []}}, 'input': {'name': 'input', 'type': 'string or array', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'Input text to get embeddings for, encoded as a string or array of tokens. To get embeddings for multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed 8192 tokens in length.', 'choices': {'type': 'none', 'options': []}}, 'user': {'name': 'user', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': '', 'description': 'A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more.', 'choices': {'type': 'none', 'options': []}}}}}, 'files': {'sections': ['list', 'upload', 'delete', 'retrieve', 'retrieve-content'], 'list': {'sync': 'openai.File.list', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.File.list()', 'models': [], 'params': ''}, 'upload': {'sync': 'openai.File.create', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.File.create(\n  file=open("mydata.jsonl", "rb"),\n  purpose=\'fine-tune\'\n)', 'models': [], 'params': {'all': ['file', 'purpose'], 'file': {'name': 'file', 'type': 'string', 'baseType': 'file', 'opt': 'Required', 'default': '', 'description': 'Name of the JSON Lines file to be uploaded.If the purpose is set to "fine-tune", each line is a JSON record with "prompt" and "completion" fields representing your training examples.', 'choices': {'type': 'none', 'options': []}}, 'purpose': {'name': 'purpose', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The intended purpose of the uploaded documents.Use "fine-tune" for Fine-tuning. This allows us to validate the format of the uploaded file.', 'choices': {'type': 'none', 'options': []}}}}, 'delete': {'sync': 'openai.File.delete', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.File.delete("file-XjGxS3KTG0uNmNOK362iJua3")', 'models': [], 'params': {'all': ['file_id'], 'file_id': {'name': 'file_id', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The ID of the file to use for this request', 'choices': {'type': 'none', 'options': []}}}}, 'retrieve': {'sync': 'openai.File.retrieve', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.File.retrieve("file-XjGxS3KTG0uNmNOK362iJua3")', 'models': [], 'params': {'all': ['file_id'], 'file_id': {'name': 'file_id', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The ID of the file to use for this request', 'choices': {'type': 'none', 'options': []}}}}, 'retrieve-content': {'sync': 'content = openai.File.download', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\ncontent = openai.File.download("file-XjGxS3KTG0uNmNOK362iJua3")', 'models': [], 'params': {'all': ['file_id'], 'file_id': {'name': 'file_id', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The ID of the file to use for this request', 'choices': {'type': 'none', 'options': []}}}}}, 'fine-tunes': {'sections': ['create', 'list', 'retrieve', 'cancel', 'events', 'delete-model'], 'create': {'sync': 'openai.FineTune.create', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.FineTune.create(training_file="file-XGinujblHPwGLSztz8cPS8XY")', 'models': [], 'params': {'all': ['training_file', 'validation_file', 'model', 'n_epochs', 'batch_size', 'learning_rate_multiplier', 'prompt_loss_weight', 'compute_classification_metrics', 'classification_n_classes', 'classification_positive_class', 'classification_betas', 'suffix'], 'training_file': {'name': 'training_file', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The ID of an uploaded file that contains training data.See upload file for how to upload a file.Your dataset must be formatted as a JSONL file, where each training\nexample is a JSON object with the keys "prompt" and "completion".\nAdditionally, you must upload your file with the purpose fine-tune.See the fine-tuning guide for more details.', 'choices': {'type': 'none', 'options': []}}, 'validation_file': {'name': 'validation_file', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': '', 'description': 'The ID of an uploaded file that contains validation data.If you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe fine-tuning results file.\nYour train and validation data should be mutually exclusive.Your dataset must be formatted as a JSONL file, where each validation\nexample is a JSON object with the keys "prompt" and "completion".\nAdditionally, you must upload your file with the purpose fine-tune.See the fine-tuning guide for more details.', 'choices': {'type': 'none', 'options': []}}, 'model': {'name': 'model', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to curie', 'description': 'The name of the base model to fine-tune. You can select one of "ada",\n"babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21.\nTo learn more about these models, see the\nModels documentation.', 'choices': {'type': 'none', 'options': []}}, 'n_epochs': {'name': 'n_epochs', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 4', 'description': 'The number of epochs to train the model for. An epoch refers to one\nfull cycle through the training dataset.', 'choices': {'type': 'none', 'options': []}}, 'batch_size': {'name': 'batch_size', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to null', 'description': 'The batch size to use for training. The batch size is the number of\ntraining examples used to train a single forward and backward pass.By default, the batch size will be dynamically configured to be\n~0.2% of the number of examples in the training set, capped at 256 -\nin general, weve found that larger batch sizes tend to work better\nfor larger datasets.', 'choices': {'type': 'none', 'options': []}}, 'learning_rate_multiplier': {'name': 'learning_rate_multiplier', 'type': 'number', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to null', 'description': 'The learning rate multiplier to use for training.\nThe fine-tuning learning rate is the original learning rate used for\npretraining multiplied by this value.By default, the learning rate multiplier is the 0.05, 0.1, or 0.2\ndepending on final batch_size (larger learning rates tend to\nperform better with larger batch sizes). We recommend experimenting\nwith values in the range 0.02 to 0.2 to see what produces the best\nresults.', 'choices': {'type': 'none', 'options': []}}, 'prompt_loss_weight': {'name': 'prompt_loss_weight', 'type': 'number', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to 0.01', 'description': 'The weight to use for loss on the prompt tokens. This controls how\nmuch the model tries to learn to generate the prompt (as compared\nto the completion which always has a weight of 1.0), and can add\na stabilizing effect to training when completions are short.If prompts are extremely long (relative to completions), it may make\nsense to reduce this weight so as to avoid over-prioritizing\nlearning the prompt.', 'choices': {'type': 'none', 'options': []}}, 'compute_classification_metrics': {'name': 'compute_classification_metrics', 'type': 'boolean', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to false', 'description': 'If set, we calculate classification-specific metrics such as accuracy\nand F-1 score using the validation set at the end of every epoch.\nThese metrics can be viewed in the results file.In order to compute classification metrics, you must provide a\nvalidation_file. Additionally, you must\nspecify classification_n_classes for multiclass classification or\nclassification_positive_class for binary classification.', 'choices': {'type': 'none', 'options': []}}, 'classification_n_classes': {'name': 'classification_n_classes', 'type': 'integer', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to null', 'description': 'The number of classes in a classification task.This parameter is required for multiclass classification.', 'choices': {'type': 'none', 'options': []}}, 'classification_positive_class': {'name': 'classification_positive_class', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to null', 'description': 'The positive class in binary classification.This parameter is needed to generate precision, recall, and F1\nmetrics when doing binary classification.', 'choices': {'type': 'none', 'options': []}}, 'classification_betas': {'name': 'classification_betas', 'type': 'array', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to null', 'description': 'If this is provided, we calculate F-beta scores at the specified\nbeta values. The F-beta score is a generalization of F-1 score.\nThis is only used for binary classification.With a beta of 1 (i.e. the F-1 score), precision and recall are\ngiven the same weight. A larger beta score puts more weight on\nrecall and less on precision. A smaller beta score puts more weight\non precision and less on recall.', 'choices': {'type': 'none', 'options': []}}, 'suffix': {'name': 'suffix', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to null', 'description': 'A string of up to 40 characters that will be added to your fine-tuned model name.For example, a suffix of "custom-model-name" would produce a model name like ada:ft-your-org:custom-model-name-2022-02-15-04-21-04.', 'choices': {'type': 'none', 'options': []}}}}, 'list': {'sync': 'openai.FineTune.list', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.FineTune.list()', 'models': [], 'params': ''}, 'retrieve': {'sync': 'openai.FineTune.retrieve', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.FineTune.retrieve(id="ft-AF1WoRqd3aJAHsqc9NY7iL8F")', 'models': [], 'params': {'all': ['fine_tune_id'], 'fine_tune_id': {'name': 'fine_tune_id', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The ID of the fine-tune job', 'choices': {'type': 'none', 'options': []}}}}, 'cancel': {'sync': 'openai.FineTune.cancel', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.FineTune.cancel(id="ft-AF1WoRqd3aJAHsqc9NY7iL8F")', 'models': [], 'params': {'all': ['fine_tune_id'], 'fine_tune_id': {'name': 'fine_tune_id', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The ID of the fine-tune job to cancel', 'choices': {'type': 'none', 'options': []}}}}, 'events': {'sync': 'openai.FineTune.list_events', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.FineTune.list_events(id="ft-AF1WoRqd3aJAHsqc9NY7iL8F")', 'models': [], 'params': {'all': ['fine_tune_id'], 'fine_tune_id': {'name': 'fine_tune_id', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The ID of the fine-tune job to get events for.', 'choices': {'type': 'none', 'options': []}}}}, 'delete-model': {'sync': 'openai.Model.delete', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Model.delete("curie:ft-acmeco-2021-03-03-21-44-20")', 'models': [], 'params': {'all': ['model'], 'model': {'name': 'model', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The model to delete', 'choices': {'type': 'none', 'options': []}}}}}, 'moderations': {'sections': ['create'], 'create': {'sync': 'openai.Moderation.create', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Moderation.create(\n  input="I want to kill them.",\n)', 'models': [], 'params': {'all': ['input', 'model'], 'input': {'name': 'input', 'type': 'string or array', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The input text to classify', 'choices': {'type': 'none', 'options': []}}, 'model': {'name': 'model', 'type': 'string', 'baseType': 'text', 'opt': 'Optional', 'default': 'Defaults to text-moderation-latest', 'description': 'Two content moderations models are available: text-moderation-stable and text-moderation-latest.The default is text-moderation-latest which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use text-moderation-stable, we will provide advanced notice before updating the model. Accuracy of text-moderation-stable may be slightly lower than for text-moderation-latest.', 'choices': {'type': 'none', 'options': []}}}}}, 'engines': {'sections': ['list', 'retrieve'], 'list': {'sync': 'openai.Engine.list', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Engine.list()', 'models': [], 'params': ''}, 'retrieve': {'sync': 'openai.Engine.retrieve', 'code': 'import os\nimport openai\nopenai.api_key = os.getenv("OPENAI_API_KEY")\nopenai.Engine.retrieve("text-davinci-003")', 'models': ['babbage', 'ada', 'text-davinci-003', 'davinci', 'text-davinci-002', 'text-davinci-001', 'curie-instruct-beta', 'code-cushman-001', 'text-ada-001', 'code-davinci-002', 'text-curie-001', 'davinci-instruct-beta', 'text-babbage-001', 'curie'], 'params': {'all': ['engine_id'], 'engine_id': {'name': 'engine_id', 'type': 'string', 'baseType': 'text', 'opt': 'Required', 'default': '', 'description': 'The ID of the engine to use for this request', 'choices': {'type': 'none', 'options': []}}}}}, 'parameter-details': {'sections': []}}
